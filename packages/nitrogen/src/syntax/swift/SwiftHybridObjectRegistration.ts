import { NitroConfig } from '../../config/NitroConfig.js'
import { getHybridObjectName } from '../getHybridObjectName.js'
import type { SourceImport } from '../SourceFile.js'

interface Props {
  /**
   * The name of the Hybrid Object under which it should be registered and exposed to JS to.
   */
  hybridObjectName: string
  /**
   * The name of the Swift class that will be default-constructed
   */
  swiftClassName: string
}

interface SwiftHybridObjectRegistration {
  cppCode: string
  swiftFunction: string
  requiredImports: SourceImport[]
}

export function createSwiftHybridObjectRegistration({
  hybridObjectName,
  swiftClassName,
}: Props): SwiftHybridObjectRegistration {
  const autolinkingClassName = `${NitroConfig.getIosModuleName()}Autolinking`
  const swiftNamespace = NitroConfig.getIosModuleName()
  const { HybridTSpecCxx, HybridTSpecSwift, HybridTSpec } =
    getHybridObjectName(hybridObjectName)

  return {
    swiftFunction: `
/**
 * Creates an instance of a Swift class that implements \`${HybridTSpec}\`,
 * and wraps it in a Swift class that can directly interop with C++ (\`${HybridTSpecCxx}\`)
 *
 * This is generated by Nitrogen and will initialize the class specified
 * in the \`"autolinking"\` property of \`nitro.json\` (in this case, \`${swiftClassName}\`).
 */
public static func create${hybridObjectName}() -> ${HybridTSpecCxx} {
  let hybridObject = ${swiftClassName}()
  return hybridObject.createCxxBridge()
}
    `.trim(),
    requiredImports: [
      { name: `${HybridTSpecSwift}.hpp`, language: 'c++', space: 'user' },
    ],
    cppCode: `
HybridObjectRegistry::registerHybridObjectConstructor(
  "${hybridObjectName}",
  []() -> std::shared_ptr<HybridObject> {
    auto swiftPart = ${swiftNamespace}::${autolinkingClassName}::create${hybridObjectName}();
    return std::make_shared<${HybridTSpecSwift}>(swiftPart);
  }
);
      `.trim(),
  }
}
