///
/// HybridTestObjectSwiftKotlinSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridTestObjectSwiftKotlinSpec.hpp"

namespace margelo::nitro::image {

  using namespace facebook;

  class JHybridTestObjectSwiftKotlinSpec final: public jni::HybridClass<JHybridTestObjectSwiftKotlinSpec, JHybridObject>,
                                                public HybridTestObjectSwiftKotlinSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/HybridTestObjectSwiftKotlinSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  private:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridTestObjectSwiftKotlinSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridTestObjectSwiftKotlinSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    size_t getExternalMemorySize() noexcept override;

  public:
    inline const jni::global_ref<JHybridTestObjectSwiftKotlinSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    double getNumberValue() override;
    void setNumberValue(double numberValue) override;
    bool getBoolValue() override;
    void setBoolValue(bool boolValue) override;
    std::string getStringValue() override;
    void setStringValue(const std::string& stringValue) override;
    int64_t getBigintValue() override;
    void setBigintValue(int64_t bigintValue) override;
    std::optional<std::string> getStringOrUndefined() override;
    void setStringOrUndefined(const std::optional<std::string>& stringOrUndefined) override;
    std::optional<std::string> getStringOrNull() override;
    void setStringOrNull(const std::optional<std::string>& stringOrNull) override;
    std::optional<std::string> getOptionalString() override;
    void setOptionalString(const std::optional<std::string>& optionalString) override;
    std::variant<std::string, double> getSomeVariantFirst() override;
    void setSomeVariantFirst(const std::variant<std::string, double>& someVariantFirst) override;
    std::shared_ptr<margelo::nitro::image::HybridTestObjectSwiftKotlinSpec> getThisObject() override;

  public:
    // Methods
    void simpleFunc() override;
    double addNumbers(double a, double b) override;
    std::string addStrings(const std::string& a, const std::string& b) override;
    void multipleArguments(double num, const std::string& str, bool boo) override;
    std::shared_ptr<AnyMap> createMap() override;
    std::shared_ptr<AnyMap> mapRoundtrip(const std::shared_ptr<AnyMap>& map) override;
    double funcThatThrows() override;
    std::string tryOptionalParams(double num, bool boo, const std::optional<std::string>& str) override;
    std::string tryMiddleParam(double num, std::optional<bool> boo, const std::string& str) override;
    std::optional<Powertrain> tryOptionalEnum(std::optional<Powertrain> value) override;
    int64_t calculateFibonacciSync(double value) override;
    std::future<int64_t> calculateFibonacciAsync(double value) override;
    std::future<void> wait(double seconds) override;
    void callCallback(const std::function<void()>& callback) override;
    void callAll(const std::function<void()>& first, const std::function<void()>& second, const std::function<void()>& third) override;
    void callWithOptional(std::optional<double> value, const std::function<void(std::optional<double> /* maybe */)>& callback) override;
    Car getCar() override;
    bool isCarElectric(const Car& car) override;
    std::optional<Person> getDriver(const Car& car) override;
    std::shared_ptr<ArrayBuffer> createArrayBuffer() override;
    double getBufferLastItem(const std::shared_ptr<ArrayBuffer>& buffer) override;
    void setAllValuesTo(const std::shared_ptr<ArrayBuffer>& buffer, double value) override;
    std::shared_ptr<margelo::nitro::image::HybridTestObjectSwiftKotlinSpec> newTestObject() override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridTestObjectSwiftKotlinSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::image
