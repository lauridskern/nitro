///
/// HybridTestObjectSwiftKotlinSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

package com.margelo.nitro.image

import android.util.Log
import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the TestObjectSwiftKotlin HybridObject.
 * Implement this abstract class to create Kotlin-based instances of TestObjectSwiftKotlin.
 */
@DoNotStrip
@Keep
@Suppress("RedundantSuppression", "KotlinJniMissingFunction", "PropertyName", "RedundantUnitReturnType", "unused")
abstract class HybridTestObjectSwiftKotlinSpec: HybridObject() {
  protected val TAG = "HybridTestObjectSwiftKotlinSpec"

  @DoNotStrip
  val mHybridData: HybridData = initHybrid()

  init {
    // Pass this `HybridData` through to it's base class,
    // to represent inheritance to JHybridObject on C++ side
    super.updateNative(mHybridData)
  }

  // Properties
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var numberValue: Double
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var boolValue: Boolean
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var stringValue: String
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var bigintValue: Long
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var stringOrUndefined: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var stringOrNull: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var optionalString: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var someVariantFirst: Variant_String_Double
  
  @get:DoNotStrip
  @get:Keep
  abstract val thisObject: HybridTestObjectSwiftKotlinSpec

  // Methods
  @DoNotStrip
  @Keep
  abstract fun simpleFunc(): Unit
  
  @DoNotStrip
  @Keep
  abstract fun addNumbers(a: Double, b: Double): Double
  
  @DoNotStrip
  @Keep
  abstract fun addStrings(a: String, b: String): String
  
  @DoNotStrip
  @Keep
  abstract fun multipleArguments(num: Double, str: String, boo: Boolean): Unit
  
  @DoNotStrip
  @Keep
  abstract fun createMap(): AnyMap
  
  @DoNotStrip
  @Keep
  abstract fun mapRoundtrip(map: AnyMap): AnyMap
  
  @DoNotStrip
  @Keep
  abstract fun funcThatThrows(): Double
  
  @DoNotStrip
  @Keep
  abstract fun tryOptionalParams(num: Double, boo: Boolean, str: String?): String
  
  @DoNotStrip
  @Keep
  abstract fun tryMiddleParam(num: Double, boo: Boolean?, str: String): String
  
  @DoNotStrip
  @Keep
  abstract fun tryOptionalEnum(value: Powertrain?): Powertrain?
  
  @DoNotStrip
  @Keep
  abstract fun calculateFibonacciSync(value: Double): Long
  
  @DoNotStrip
  @Keep
  abstract fun calculateFibonacciAsync(value: Double): Promise<Long>
  
  @DoNotStrip
  @Keep
  abstract fun wait(seconds: Double): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun callCallback(callback: () -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun callCallback(callback: Func_void): Unit {
    val result = callCallback(callback.toLambda())
    return result
  }
  
  @DoNotStrip
  @Keep
  abstract fun callAll(first: () -> Unit, second: () -> Unit, third: () -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun callAll(first: Func_void, second: Func_void, third: Func_void): Unit {
    val result = callAll(first.toLambda(), second.toLambda(), third.toLambda())
    return result
  }
  
  @DoNotStrip
  @Keep
  abstract fun callWithOptional(value: Double?, callback: (maybe: Double?) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun callWithOptional(value: Double?, callback: Func_void_std__optional_double_): Unit {
    val result = callWithOptional(value, callback.toLambda())
    return result
  }
  
  @DoNotStrip
  @Keep
  abstract fun getCar(): Car
  
  @DoNotStrip
  @Keep
  abstract fun isCarElectric(car: Car): Boolean
  
  @DoNotStrip
  @Keep
  abstract fun getDriver(car: Car): Person?
  
  @DoNotStrip
  @Keep
  abstract fun createArrayBuffer(): ArrayBuffer
  
  @DoNotStrip
  @Keep
  abstract fun getBufferLastItem(buffer: ArrayBuffer): Double
  
  @DoNotStrip
  @Keep
  abstract fun setAllValuesTo(buffer: ArrayBuffer, value: Double): Unit
  
  @DoNotStrip
  @Keep
  abstract fun newTestObject(): HybridTestObjectSwiftKotlinSpec

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridTestObjectSwiftKotlinSpec"
    init {
      try {
        Log.i(TAG, "Loading NitroImage C++ library...")
        System.loadLibrary("NitroImage")
        Log.i(TAG, "Successfully loaded NitroImage C++ library!")
      } catch (e: Error) {
        Log.e(TAG, "Failed to load NitroImage C++ library! Is it properly installed and linked? " +
                    "Is the name correct? (see `CMakeLists.txt`, at `add_library(...)`)", e)
        throw e
      }
    }
  }
}
